// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Pose.capn

#ifndef CAPNP_INCLUDED_c0b2c1572d185015_
#define CAPNP_INCLUDED_c0b2c1572d185015_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Point.capn.h"
#include "Quaternion.capn.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e7d9add5e94df07f);

}  // namespace schemas
}  // namespace capnp


struct Pose {
  Pose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7d9add5e94df07f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Pose::Reader {
public:
  typedef Pose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::Point::Reader getPosition() const;

  inline bool hasQuaternion() const;
  inline  ::Quaternion::Reader getQuaternion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Pose::Builder {
public:
  typedef Pose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::Point::Builder getPosition();
  inline void setPosition( ::Point::Reader value);
  inline  ::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::Point>&& value);
  inline ::capnp::Orphan< ::Point> disownPosition();

  inline bool hasQuaternion();
  inline  ::Quaternion::Builder getQuaternion();
  inline void setQuaternion( ::Quaternion::Reader value);
  inline  ::Quaternion::Builder initQuaternion();
  inline void adoptQuaternion(::capnp::Orphan< ::Quaternion>&& value);
  inline ::capnp::Orphan< ::Quaternion> disownQuaternion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Pose::Pipeline {
public:
  typedef Pose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Point::Pipeline getPosition();
  inline  ::Quaternion::Pipeline getQuaternion();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Pose::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Pose::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Point::Reader Pose::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Point::Builder Pose::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Point::Pipeline Pose::Pipeline::getPosition() {
  return  ::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Pose::Builder::setPosition( ::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Point::Builder Pose::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Pose::Builder::adoptPosition(
    ::capnp::Orphan< ::Point>&& value) {
  ::capnp::_::PointerHelpers< ::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Point> Pose::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Pose::Reader::hasQuaternion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Pose::Builder::hasQuaternion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::Quaternion::Reader Pose::Reader::getQuaternion() const {
  return ::capnp::_::PointerHelpers< ::Quaternion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::Quaternion::Builder Pose::Builder::getQuaternion() {
  return ::capnp::_::PointerHelpers< ::Quaternion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Quaternion::Pipeline Pose::Pipeline::getQuaternion() {
  return  ::Quaternion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Pose::Builder::setQuaternion( ::Quaternion::Reader value) {
  ::capnp::_::PointerHelpers< ::Quaternion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::Quaternion::Builder Pose::Builder::initQuaternion() {
  return ::capnp::_::PointerHelpers< ::Quaternion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Pose::Builder::adoptQuaternion(
    ::capnp::Orphan< ::Quaternion>&& value) {
  ::capnp::_::PointerHelpers< ::Quaternion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Quaternion> Pose::Builder::disownQuaternion() {
  return ::capnp::_::PointerHelpers< ::Quaternion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_c0b2c1572d185015_
