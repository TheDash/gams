// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Twist.capn

#include "Twist.capn.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<47> b_a3d42efa11e112f6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    246,  18, 225,  17, 250,  46, 212, 163,
     11,   0,   0,   0,   1,   0,   0,   0,
    118, 114, 192,  47, 105,   6, 177, 206,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84, 119, 105, 115, 116,  46,  99,  97,
    112, 110,  58,  84, 119, 105, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 110, 101,  97, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      9,  89,  37,  43, 102,  61, 233, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110, 103, 117, 108,  97, 114,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      9,  89,  37,  43, 102,  61, 233, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a3d42efa11e112f6 = b_a3d42efa11e112f6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a3d42efa11e112f6[] = {
  &s_99e93d662b255909,
};
static const uint16_t m_a3d42efa11e112f6[] = {1, 0};
static const uint16_t i_a3d42efa11e112f6[] = {0, 1};
const ::capnp::_::RawSchema s_a3d42efa11e112f6 = {
  0xa3d42efa11e112f6, b_a3d42efa11e112f6.words, 47, d_a3d42efa11e112f6, m_a3d42efa11e112f6,
  1, 2, i_a3d42efa11e112f6, nullptr, nullptr, { &s_a3d42efa11e112f6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Twist
constexpr uint16_t Twist::_capnpPrivate::dataWordSize;
constexpr uint16_t Twist::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Twist::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Twist::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



