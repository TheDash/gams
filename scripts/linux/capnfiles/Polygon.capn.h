// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Polygon.capn

#ifndef CAPNP_INCLUDED_f16f817af7d7e817_
#define CAPNP_INCLUDED_f16f817af7d7e817_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Point32.capn.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b97ddb5d4b7c7e3c);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct Polygon {
  Polygon() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b97ddb5d4b7c7e3c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Polygon::Reader {
public:
  typedef Polygon Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPoints() const;
  inline  ::capnp::List< ::gams::types::Point32>::Reader getPoints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Polygon::Builder {
public:
  typedef Polygon Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPoints();
  inline  ::capnp::List< ::gams::types::Point32>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::gams::types::Point32>::Reader value);
  inline  ::capnp::List< ::gams::types::Point32>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::gams::types::Point32>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gams::types::Point32>> disownPoints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Polygon::Pipeline {
public:
  typedef Polygon Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Polygon::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Polygon::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gams::types::Point32>::Reader Polygon::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gams::types::Point32>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gams::types::Point32>::Builder Polygon::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gams::types::Point32>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Polygon::Builder::setPoints( ::capnp::List< ::gams::types::Point32>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gams::types::Point32>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gams::types::Point32>::Builder Polygon::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gams::types::Point32>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Polygon::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::gams::types::Point32>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gams::types::Point32>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gams::types::Point32>> Polygon::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gams::types::Point32>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_f16f817af7d7e817_
