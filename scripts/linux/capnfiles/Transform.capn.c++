// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Transform.capn

#include "Transform.capn.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_9cea576581d10d40 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64,  13, 209, 129, 101,  87, 234, 156,
     15,   0,   0,   0,   1,   0,   0,   0,
    238,  54,  77, 148,  66,  27, 173, 155,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84, 114,  97, 110, 115, 102, 111, 114,
    109,  46,  99,  97, 112, 110,  58,  84,
    114,  97, 110, 115, 102, 111, 114, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    116, 114,  97, 110, 115, 108,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     75, 153,  28, 131, 204, 196,  93, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 116,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     42, 117,  33,  55,  24,  85, 104, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9cea576581d10d40 = b_9cea576581d10d40.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9cea576581d10d40[] = {
  &s_ac5dc4cc831c994b,
  &s_b06855183721752a,
};
static const uint16_t m_9cea576581d10d40[] = {1, 0};
static const uint16_t i_9cea576581d10d40[] = {0, 1};
const ::capnp::_::RawSchema s_9cea576581d10d40 = {
  0x9cea576581d10d40, b_9cea576581d10d40.words, 50, d_9cea576581d10d40, m_9cea576581d10d40,
  2, 2, i_9cea576581d10d40, nullptr, nullptr, { &s_9cea576581d10d40, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// Transform
constexpr uint16_t Transform::_capnpPrivate::dataWordSize;
constexpr uint16_t Transform::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Transform::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Transform::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

