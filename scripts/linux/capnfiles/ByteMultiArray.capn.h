// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ByteMultiArray.capn

#ifndef CAPNP_INCLUDED_c136659c9c0bd817_
#define CAPNP_INCLUDED_c136659c9c0bd817_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "MultiArrayLayout.capn.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ef6ec169517e50c3);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct ByteMultiArray {
  ByteMultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef6ec169517e50c3, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ByteMultiArray::Reader {
public:
  typedef ByteMultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::List< ::int8_t>::Reader getData() const;

  inline bool hasLayout() const;
  inline  ::gams::types::MultiArrayLayout::Reader getLayout() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteMultiArray::Builder {
public:
  typedef ByteMultiArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::List< ::int8_t>::Builder getData();
  inline void setData( ::capnp::List< ::int8_t>::Reader value);
  inline void setData(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownData();

  inline bool hasLayout();
  inline  ::gams::types::MultiArrayLayout::Builder getLayout();
  inline void setLayout( ::gams::types::MultiArrayLayout::Reader value);
  inline  ::gams::types::MultiArrayLayout::Builder initLayout();
  inline void adoptLayout(::capnp::Orphan< ::gams::types::MultiArrayLayout>&& value);
  inline ::capnp::Orphan< ::gams::types::MultiArrayLayout> disownLayout();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteMultiArray::Pipeline {
public:
  typedef ByteMultiArray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gams::types::MultiArrayLayout::Pipeline getLayout();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ByteMultiArray::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ByteMultiArray::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t>::Reader ByteMultiArray::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t>::Builder ByteMultiArray::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ByteMultiArray::Builder::setData( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ByteMultiArray::Builder::setData(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t>::Builder ByteMultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ByteMultiArray::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> ByteMultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ByteMultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ByteMultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::MultiArrayLayout::Reader ByteMultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers< ::gams::types::MultiArrayLayout>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gams::types::MultiArrayLayout::Builder ByteMultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers< ::gams::types::MultiArrayLayout>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::MultiArrayLayout::Pipeline ByteMultiArray::Pipeline::getLayout() {
  return  ::gams::types::MultiArrayLayout::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ByteMultiArray::Builder::setLayout( ::gams::types::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::MultiArrayLayout>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::MultiArrayLayout::Builder ByteMultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers< ::gams::types::MultiArrayLayout>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ByteMultiArray::Builder::adoptLayout(
    ::capnp::Orphan< ::gams::types::MultiArrayLayout>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::MultiArrayLayout>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::MultiArrayLayout> ByteMultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers< ::gams::types::MultiArrayLayout>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_c136659c9c0bd817_
