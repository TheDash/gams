// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: String.capn

#include "String.capn.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<32> b_a619fa90c8a0995f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 153, 160, 200, 144, 250,  25, 166,
     12,   0,   0,   0,   1,   0,   0,   0,
    110,  73,  79, 130, 226,  44,  86, 219,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 116, 114, 105, 110, 103,  46,  99,
     97, 112, 110,  58,  83, 116, 114, 105,
    110, 103,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a619fa90c8a0995f = b_a619fa90c8a0995f.words;
#if !CAPNP_LITE
static const uint16_t m_a619fa90c8a0995f[] = {0};
static const uint16_t i_a619fa90c8a0995f[] = {0};
const ::capnp::_::RawSchema s_a619fa90c8a0995f = {
  0xa619fa90c8a0995f, b_a619fa90c8a0995f.words, 32, nullptr, m_a619fa90c8a0995f,
  0, 1, i_a619fa90c8a0995f, nullptr, nullptr, { &s_a619fa90c8a0995f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// String
constexpr uint16_t String::_capnpPrivate::dataWordSize;
constexpr uint16_t String::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind String::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* String::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

