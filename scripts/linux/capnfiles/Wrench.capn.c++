// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Wrench.capn

#include "Wrench.capn.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<47> b_c4d205df0bbce7b5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    181, 231, 188,  11, 223,   5, 210, 196,
     12,   0,   0,   0,   1,   0,   0,   0,
    160, 213,  58,  56, 148,  14, 250, 237,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     87, 114, 101, 110,  99, 104,  46,  99,
     97, 112, 110,  58,  87, 114, 101, 110,
     99, 104,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 114, 113, 117, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     75, 153,  28, 131, 204, 196,  93, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 114,  99, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     75, 153,  28, 131, 204, 196,  93, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c4d205df0bbce7b5 = b_c4d205df0bbce7b5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c4d205df0bbce7b5[] = {
  &s_ac5dc4cc831c994b,
};
static const uint16_t m_c4d205df0bbce7b5[] = {1, 0};
static const uint16_t i_c4d205df0bbce7b5[] = {0, 1};
const ::capnp::_::RawSchema s_c4d205df0bbce7b5 = {
  0xc4d205df0bbce7b5, b_c4d205df0bbce7b5.words, 47, d_c4d205df0bbce7b5, m_c4d205df0bbce7b5,
  1, 2, i_c4d205df0bbce7b5, nullptr, nullptr, { &s_c4d205df0bbce7b5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// Wrench
constexpr uint16_t Wrench::_capnpPrivate::dataWordSize;
constexpr uint16_t Wrench::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Wrench::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Wrench::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

