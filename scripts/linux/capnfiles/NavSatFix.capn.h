// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: NavSatFix.capn

#ifndef CAPNP_INCLUDED_b4676f53a50d6538_
#define CAPNP_INCLUDED_b4676f53a50d6538_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Header.capn.h"
#include "NavSatStatus.capn.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ea2f13d5afc6a13c);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct NavSatFix {
  NavSatFix() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea2f13d5afc6a13c, 4, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class NavSatFix::Reader {
public:
  typedef NavSatFix Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStatus() const;
  inline  ::gams::types::NavSatStatus::Reader getStatus() const;

  inline double getAltitude() const;

  inline double getLongitude() const;

  inline bool hasPositionCovariance() const;
  inline  ::capnp::List<double>::Reader getPositionCovariance() const;

  inline bool hasHeader() const;
  inline  ::gams::types::Header::Reader getHeader() const;

  inline double getLatitude() const;

  inline  ::uint8_t getPositionCovarianceType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavSatFix::Builder {
public:
  typedef NavSatFix Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStatus();
  inline  ::gams::types::NavSatStatus::Builder getStatus();
  inline void setStatus( ::gams::types::NavSatStatus::Reader value);
  inline  ::gams::types::NavSatStatus::Builder initStatus();
  inline void adoptStatus(::capnp::Orphan< ::gams::types::NavSatStatus>&& value);
  inline ::capnp::Orphan< ::gams::types::NavSatStatus> disownStatus();

  inline double getAltitude();
  inline void setAltitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline bool hasPositionCovariance();
  inline  ::capnp::List<double>::Builder getPositionCovariance();
  inline void setPositionCovariance( ::capnp::List<double>::Reader value);
  inline void setPositionCovariance(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initPositionCovariance(unsigned int size);
  inline void adoptPositionCovariance(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownPositionCovariance();

  inline bool hasHeader();
  inline  ::gams::types::Header::Builder getHeader();
  inline void setHeader( ::gams::types::Header::Reader value);
  inline  ::gams::types::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::gams::types::Header>&& value);
  inline ::capnp::Orphan< ::gams::types::Header> disownHeader();

  inline double getLatitude();
  inline void setLatitude(double value);

  inline  ::uint8_t getPositionCovarianceType();
  inline void setPositionCovarianceType( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavSatFix::Pipeline {
public:
  typedef NavSatFix Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gams::types::NavSatStatus::Pipeline getStatus();
  inline  ::gams::types::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool NavSatFix::Reader::hasStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavSatFix::Builder::hasStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::NavSatStatus::Reader NavSatFix::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers< ::gams::types::NavSatStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gams::types::NavSatStatus::Builder NavSatFix::Builder::getStatus() {
  return ::capnp::_::PointerHelpers< ::gams::types::NavSatStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::NavSatStatus::Pipeline NavSatFix::Pipeline::getStatus() {
  return  ::gams::types::NavSatStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavSatFix::Builder::setStatus( ::gams::types::NavSatStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::NavSatStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::NavSatStatus::Builder NavSatFix::Builder::initStatus() {
  return ::capnp::_::PointerHelpers< ::gams::types::NavSatStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavSatFix::Builder::adoptStatus(
    ::capnp::Orphan< ::gams::types::NavSatStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::NavSatStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::NavSatStatus> NavSatFix::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers< ::gams::types::NavSatStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double NavSatFix::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NavSatFix::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavSatFix::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NavSatFix::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NavSatFix::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavSatFix::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavSatFix::Reader::hasPositionCovariance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavSatFix::Builder::hasPositionCovariance() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader NavSatFix::Reader::getPositionCovariance() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder NavSatFix::Builder::getPositionCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavSatFix::Builder::setPositionCovariance( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void NavSatFix::Builder::setPositionCovariance(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder NavSatFix::Builder::initPositionCovariance(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavSatFix::Builder::adoptPositionCovariance(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> NavSatFix::Builder::disownPositionCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavSatFix::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavSatFix::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Header::Reader NavSatFix::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gams::types::Header::Builder NavSatFix::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Header::Pipeline NavSatFix::Pipeline::getHeader() {
  return  ::gams::types::Header::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void NavSatFix::Builder::setHeader( ::gams::types::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Header>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Header::Builder NavSatFix::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavSatFix::Builder::adoptHeader(
    ::capnp::Orphan< ::gams::types::Header>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Header> NavSatFix::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double NavSatFix::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double NavSatFix::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavSatFix::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t NavSatFix::Reader::getPositionCovarianceType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t NavSatFix::Builder::getPositionCovarianceType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void NavSatFix::Builder::setPositionCovarianceType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_b4676f53a50d6538_
