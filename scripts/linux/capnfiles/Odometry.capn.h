// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Odometry.capn

#ifndef CAPNP_INCLUDED_9289819130a156ec_
#define CAPNP_INCLUDED_9289819130a156ec_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Header.capn.h"
#include "PoseWithCovariance.capn.h"
#include "TwistWithCovariance.capn.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fcc1d3c3a271db2d);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct Odometry {
  Odometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcc1d3c3a271db2d, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Odometry::Reader {
public:
  typedef Odometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTwist() const;
  inline  ::gams::types::TwistWithCovariance::Reader getTwist() const;

  inline bool hasHeader() const;
  inline  ::gams::types::Header::Reader getHeader() const;

  inline bool hasPose() const;
  inline  ::gams::types::PoseWithCovariance::Reader getPose() const;

  inline bool hasChildFrameId() const;
  inline  ::capnp::Text::Reader getChildFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Odometry::Builder {
public:
  typedef Odometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTwist();
  inline  ::gams::types::TwistWithCovariance::Builder getTwist();
  inline void setTwist( ::gams::types::TwistWithCovariance::Reader value);
  inline  ::gams::types::TwistWithCovariance::Builder initTwist();
  inline void adoptTwist(::capnp::Orphan< ::gams::types::TwistWithCovariance>&& value);
  inline ::capnp::Orphan< ::gams::types::TwistWithCovariance> disownTwist();

  inline bool hasHeader();
  inline  ::gams::types::Header::Builder getHeader();
  inline void setHeader( ::gams::types::Header::Reader value);
  inline  ::gams::types::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::gams::types::Header>&& value);
  inline ::capnp::Orphan< ::gams::types::Header> disownHeader();

  inline bool hasPose();
  inline  ::gams::types::PoseWithCovariance::Builder getPose();
  inline void setPose( ::gams::types::PoseWithCovariance::Reader value);
  inline  ::gams::types::PoseWithCovariance::Builder initPose();
  inline void adoptPose(::capnp::Orphan< ::gams::types::PoseWithCovariance>&& value);
  inline ::capnp::Orphan< ::gams::types::PoseWithCovariance> disownPose();

  inline bool hasChildFrameId();
  inline  ::capnp::Text::Builder getChildFrameId();
  inline void setChildFrameId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initChildFrameId(unsigned int size);
  inline void adoptChildFrameId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownChildFrameId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Odometry::Pipeline {
public:
  typedef Odometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gams::types::TwistWithCovariance::Pipeline getTwist();
  inline  ::gams::types::Header::Pipeline getHeader();
  inline  ::gams::types::PoseWithCovariance::Pipeline getPose();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Odometry::Reader::hasTwist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry::Builder::hasTwist() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::TwistWithCovariance::Reader Odometry::Reader::getTwist() const {
  return ::capnp::_::PointerHelpers< ::gams::types::TwistWithCovariance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gams::types::TwistWithCovariance::Builder Odometry::Builder::getTwist() {
  return ::capnp::_::PointerHelpers< ::gams::types::TwistWithCovariance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::TwistWithCovariance::Pipeline Odometry::Pipeline::getTwist() {
  return  ::gams::types::TwistWithCovariance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Odometry::Builder::setTwist( ::gams::types::TwistWithCovariance::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::TwistWithCovariance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::TwistWithCovariance::Builder Odometry::Builder::initTwist() {
  return ::capnp::_::PointerHelpers< ::gams::types::TwistWithCovariance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Odometry::Builder::adoptTwist(
    ::capnp::Orphan< ::gams::types::TwistWithCovariance>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::TwistWithCovariance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::TwistWithCovariance> Odometry::Builder::disownTwist() {
  return ::capnp::_::PointerHelpers< ::gams::types::TwistWithCovariance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Odometry::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Header::Reader Odometry::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gams::types::Header::Builder Odometry::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Header::Pipeline Odometry::Pipeline::getHeader() {
  return  ::gams::types::Header::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Odometry::Builder::setHeader( ::gams::types::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Header>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Header::Builder Odometry::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Odometry::Builder::adoptHeader(
    ::capnp::Orphan< ::gams::types::Header>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Header> Odometry::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Odometry::Reader::hasPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry::Builder::hasPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::PoseWithCovariance::Reader Odometry::Reader::getPose() const {
  return ::capnp::_::PointerHelpers< ::gams::types::PoseWithCovariance>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gams::types::PoseWithCovariance::Builder Odometry::Builder::getPose() {
  return ::capnp::_::PointerHelpers< ::gams::types::PoseWithCovariance>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::PoseWithCovariance::Pipeline Odometry::Pipeline::getPose() {
  return  ::gams::types::PoseWithCovariance::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Odometry::Builder::setPose( ::gams::types::PoseWithCovariance::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::PoseWithCovariance>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::PoseWithCovariance::Builder Odometry::Builder::initPose() {
  return ::capnp::_::PointerHelpers< ::gams::types::PoseWithCovariance>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Odometry::Builder::adoptPose(
    ::capnp::Orphan< ::gams::types::PoseWithCovariance>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::PoseWithCovariance>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::PoseWithCovariance> Odometry::Builder::disownPose() {
  return ::capnp::_::PointerHelpers< ::gams::types::PoseWithCovariance>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Odometry::Reader::hasChildFrameId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry::Builder::hasChildFrameId() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Odometry::Reader::getChildFrameId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Odometry::Builder::getChildFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Odometry::Builder::setChildFrameId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Odometry::Builder::initChildFrameId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Odometry::Builder::adoptChildFrameId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Odometry::Builder::disownChildFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_9289819130a156ec_
