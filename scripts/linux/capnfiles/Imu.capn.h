// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Imu.capn

#ifndef CAPNP_INCLUDED_c16e9e9e4642ee2c_
#define CAPNP_INCLUDED_c16e9e9e4642ee2c_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Header.capn.h"
#include "Quaternion.capn.h"
#include "Vector3.capn.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(82550073cc37fa52);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct Imu {
  Imu() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82550073cc37fa52, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Imu::Reader {
public:
  typedef Imu Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLinearAccelerationCovariance() const;
  inline  ::capnp::List<double>::Reader getLinearAccelerationCovariance() const;

  inline bool hasOrientation() const;
  inline  ::gams::types::Quaternion::Reader getOrientation() const;

  inline bool hasAngularVelocityCovariance() const;
  inline  ::capnp::List<double>::Reader getAngularVelocityCovariance() const;

  inline bool hasOrientationCovariance() const;
  inline  ::capnp::List<double>::Reader getOrientationCovariance() const;

  inline bool hasHeader() const;
  inline  ::gams::types::Header::Reader getHeader() const;

  inline bool hasLinearAcceleration() const;
  inline  ::gams::types::Vector3::Reader getLinearAcceleration() const;

  inline bool hasAngularVelocity() const;
  inline  ::gams::types::Vector3::Reader getAngularVelocity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Imu::Builder {
public:
  typedef Imu Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLinearAccelerationCovariance();
  inline  ::capnp::List<double>::Builder getLinearAccelerationCovariance();
  inline void setLinearAccelerationCovariance( ::capnp::List<double>::Reader value);
  inline void setLinearAccelerationCovariance(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initLinearAccelerationCovariance(unsigned int size);
  inline void adoptLinearAccelerationCovariance(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownLinearAccelerationCovariance();

  inline bool hasOrientation();
  inline  ::gams::types::Quaternion::Builder getOrientation();
  inline void setOrientation( ::gams::types::Quaternion::Reader value);
  inline  ::gams::types::Quaternion::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::gams::types::Quaternion>&& value);
  inline ::capnp::Orphan< ::gams::types::Quaternion> disownOrientation();

  inline bool hasAngularVelocityCovariance();
  inline  ::capnp::List<double>::Builder getAngularVelocityCovariance();
  inline void setAngularVelocityCovariance( ::capnp::List<double>::Reader value);
  inline void setAngularVelocityCovariance(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initAngularVelocityCovariance(unsigned int size);
  inline void adoptAngularVelocityCovariance(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownAngularVelocityCovariance();

  inline bool hasOrientationCovariance();
  inline  ::capnp::List<double>::Builder getOrientationCovariance();
  inline void setOrientationCovariance( ::capnp::List<double>::Reader value);
  inline void setOrientationCovariance(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initOrientationCovariance(unsigned int size);
  inline void adoptOrientationCovariance(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownOrientationCovariance();

  inline bool hasHeader();
  inline  ::gams::types::Header::Builder getHeader();
  inline void setHeader( ::gams::types::Header::Reader value);
  inline  ::gams::types::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::gams::types::Header>&& value);
  inline ::capnp::Orphan< ::gams::types::Header> disownHeader();

  inline bool hasLinearAcceleration();
  inline  ::gams::types::Vector3::Builder getLinearAcceleration();
  inline void setLinearAcceleration( ::gams::types::Vector3::Reader value);
  inline  ::gams::types::Vector3::Builder initLinearAcceleration();
  inline void adoptLinearAcceleration(::capnp::Orphan< ::gams::types::Vector3>&& value);
  inline ::capnp::Orphan< ::gams::types::Vector3> disownLinearAcceleration();

  inline bool hasAngularVelocity();
  inline  ::gams::types::Vector3::Builder getAngularVelocity();
  inline void setAngularVelocity( ::gams::types::Vector3::Reader value);
  inline  ::gams::types::Vector3::Builder initAngularVelocity();
  inline void adoptAngularVelocity(::capnp::Orphan< ::gams::types::Vector3>&& value);
  inline ::capnp::Orphan< ::gams::types::Vector3> disownAngularVelocity();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Imu::Pipeline {
public:
  typedef Imu Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gams::types::Quaternion::Pipeline getOrientation();
  inline  ::gams::types::Header::Pipeline getHeader();
  inline  ::gams::types::Vector3::Pipeline getLinearAcceleration();
  inline  ::gams::types::Vector3::Pipeline getAngularVelocity();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Imu::Reader::hasLinearAccelerationCovariance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasLinearAccelerationCovariance() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader Imu::Reader::getLinearAccelerationCovariance() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder Imu::Builder::getLinearAccelerationCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Imu::Builder::setLinearAccelerationCovariance( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Imu::Builder::setLinearAccelerationCovariance(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder Imu::Builder::initLinearAccelerationCovariance(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Imu::Builder::adoptLinearAccelerationCovariance(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> Imu::Builder::disownLinearAccelerationCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Quaternion::Reader Imu::Reader::getOrientation() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Quaternion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gams::types::Quaternion::Builder Imu::Builder::getOrientation() {
  return ::capnp::_::PointerHelpers< ::gams::types::Quaternion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Quaternion::Pipeline Imu::Pipeline::getOrientation() {
  return  ::gams::types::Quaternion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setOrientation( ::gams::types::Quaternion::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Quaternion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Quaternion::Builder Imu::Builder::initOrientation() {
  return ::capnp::_::PointerHelpers< ::gams::types::Quaternion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptOrientation(
    ::capnp::Orphan< ::gams::types::Quaternion>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Quaternion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Quaternion> Imu::Builder::disownOrientation() {
  return ::capnp::_::PointerHelpers< ::gams::types::Quaternion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasAngularVelocityCovariance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasAngularVelocityCovariance() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader Imu::Reader::getAngularVelocityCovariance() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder Imu::Builder::getAngularVelocityCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Imu::Builder::setAngularVelocityCovariance( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Imu::Builder::setAngularVelocityCovariance(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder Imu::Builder::initAngularVelocityCovariance(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Imu::Builder::adoptAngularVelocityCovariance(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> Imu::Builder::disownAngularVelocityCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasOrientationCovariance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasOrientationCovariance() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader Imu::Reader::getOrientationCovariance() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder Imu::Builder::getOrientationCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Imu::Builder::setOrientationCovariance( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Imu::Builder::setOrientationCovariance(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder Imu::Builder::initOrientationCovariance(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Imu::Builder::adoptOrientationCovariance(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> Imu::Builder::disownOrientationCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Header::Reader Imu::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gams::types::Header::Builder Imu::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Header::Pipeline Imu::Pipeline::getHeader() {
  return  ::gams::types::Header::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setHeader( ::gams::types::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Header>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Header::Builder Imu::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptHeader(
    ::capnp::Orphan< ::gams::types::Header>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Header> Imu::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::gams::types::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasLinearAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasLinearAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Vector3::Reader Imu::Reader::getLinearAcceleration() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gams::types::Vector3::Builder Imu::Builder::getLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Vector3::Pipeline Imu::Pipeline::getLinearAcceleration() {
  return  ::gams::types::Vector3::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setLinearAcceleration( ::gams::types::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Vector3::Builder Imu::Builder::initLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptLinearAcceleration(
    ::capnp::Orphan< ::gams::types::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Vector3> Imu::Builder::disownLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Vector3::Reader Imu::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gams::types::Vector3::Builder Imu::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Vector3::Pipeline Imu::Pipeline::getAngularVelocity() {
  return  ::gams::types::Vector3::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setAngularVelocity( ::gams::types::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Vector3::Builder Imu::Builder::initAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::gams::types::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Vector3> Imu::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_c16e9e9e4642ee2c_
