// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Empty.capn

#include "Empty.capn.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<16> b_c4d1c3cd86255971 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    113,  89,  37, 134, 205, 195, 209, 196,
     11,   0,   0,   0,   1,   0,   0,   0,
     76, 223,  15,  45,  46,  50, 145, 243,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69, 109, 112, 116, 121,  46,  99,  97,
    112, 110,  58,  69, 109, 112, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c4d1c3cd86255971 = b_c4d1c3cd86255971.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c4d1c3cd86255971 = {
  0xc4d1c3cd86255971, b_c4d1c3cd86255971.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c4d1c3cd86255971, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// Empty
constexpr uint16_t Empty::_capnpPrivate::dataWordSize;
constexpr uint16_t Empty::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Empty::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Empty::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

