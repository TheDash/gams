// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: MapMetaData.capnp

#ifndef CAPNP_INCLUDED_d977fc577e0fde62_
#define CAPNP_INCLUDED_d977fc577e0fde62_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Pose.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d2be968db8cbc8b9);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct MapMetaData {
  MapMetaData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2be968db8cbc8b9, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MapMetaData::Reader {
public:
  typedef MapMetaData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOrigin() const;
  inline  ::gams::types::Pose::Reader getOrigin() const;

  inline  ::uint32_t getWidth() const;

  inline  ::int64_t getMapLoadTime() const;

  inline float getResolution() const;

  inline  ::uint32_t getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapMetaData::Builder {
public:
  typedef MapMetaData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOrigin();
  inline  ::gams::types::Pose::Builder getOrigin();
  inline void setOrigin( ::gams::types::Pose::Reader value);
  inline  ::gams::types::Pose::Builder initOrigin();
  inline void adoptOrigin(::capnp::Orphan< ::gams::types::Pose>&& value);
  inline ::capnp::Orphan< ::gams::types::Pose> disownOrigin();

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::int64_t getMapLoadTime();
  inline void setMapLoadTime( ::int64_t value);

  inline float getResolution();
  inline void setResolution(float value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapMetaData::Pipeline {
public:
  typedef MapMetaData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gams::types::Pose::Pipeline getOrigin();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool MapMetaData::Reader::hasOrigin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MapMetaData::Builder::hasOrigin() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Pose::Reader MapMetaData::Reader::getOrigin() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gams::types::Pose::Builder MapMetaData::Builder::getOrigin() {
  return ::capnp::_::PointerHelpers< ::gams::types::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Pose::Pipeline MapMetaData::Pipeline::getOrigin() {
  return  ::gams::types::Pose::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MapMetaData::Builder::setOrigin( ::gams::types::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Pose::Builder MapMetaData::Builder::initOrigin() {
  return ::capnp::_::PointerHelpers< ::gams::types::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapMetaData::Builder::adoptOrigin(
    ::capnp::Orphan< ::gams::types::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Pose> MapMetaData::Builder::disownOrigin() {
  return ::capnp::_::PointerHelpers< ::gams::types::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t MapMetaData::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MapMetaData::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapMetaData::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t MapMetaData::Reader::getMapLoadTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t MapMetaData::Builder::getMapLoadTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapMetaData::Builder::setMapLoadTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float MapMetaData::Reader::getResolution() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float MapMetaData::Builder::getResolution() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapMetaData::Builder::setResolution(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MapMetaData::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MapMetaData::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void MapMetaData::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_d977fc577e0fde62_
