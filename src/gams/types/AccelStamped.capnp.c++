// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: AccelStamped.capnp

#include "AccelStamped.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_83564e10fcf172f4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    244, 114, 241, 252,  16,  78,  86, 131,
     34,   0,   0,   0,   1,   0,   0,   0,
     74, 139,  11, 133, 214,  53, 162, 146,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 103,  97, 109, 115,
     47, 116, 121, 112, 101, 115,  47,  65,
     99,  99, 101, 108,  83, 116,  97, 109,
    112, 101, 100,  46,  99,  97, 112, 110,
    112,  58,  65,  99,  99, 101, 108,  83,
    116,  97, 109, 112, 101, 100,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100, 101, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     19, 153, 130, 198, 110,  82, 149, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 108,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    177,  36,  21,  24,  33, 143, 249, 148,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_83564e10fcf172f4 = b_83564e10fcf172f4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_83564e10fcf172f4[] = {
  &s_94f98f21181524b1,
  &s_cc95526ec6829913,
};
static const uint16_t m_83564e10fcf172f4[] = {1, 0};
static const uint16_t i_83564e10fcf172f4[] = {0, 1};
const ::capnp::_::RawSchema s_83564e10fcf172f4 = {
  0x83564e10fcf172f4, b_83564e10fcf172f4.words, 50, d_83564e10fcf172f4, m_83564e10fcf172f4,
  2, 2, i_83564e10fcf172f4, nullptr, nullptr, { &s_83564e10fcf172f4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// AccelStamped
constexpr uint16_t AccelStamped::_capnpPrivate::dataWordSize;
constexpr uint16_t AccelStamped::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AccelStamped::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AccelStamped::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

