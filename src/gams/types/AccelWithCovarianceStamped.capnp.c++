// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: AccelWithCovarianceStamped.capnp

#include "AccelWithCovarianceStamped.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<54> b_be11f0a1f0e42c37 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     55,  44, 228, 240, 161, 240,  17, 190,
     48,   0,   0,   0,   1,   0,   0,   0,
     42,  72,  74, 232, 229, 163,  84, 209,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
     57,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 103,  97, 109, 115,
     47, 116, 121, 112, 101, 115,  47,  65,
     99,  99, 101, 108,  87, 105, 116, 104,
     67, 111, 118,  97, 114, 105,  97, 110,
     99, 101,  83, 116,  97, 109, 112, 101,
    100,  46,  99,  97, 112, 110, 112,  58,
     65,  99,  99, 101, 108,  87, 105, 116,
    104,  67, 111, 118,  97, 114, 105,  97,
    110,  99, 101,  83, 116,  97, 109, 112,
    101, 100,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100, 101, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     19, 153, 130, 198, 110,  82, 149, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 108,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     19, 172,  29, 227,  96, 174, 211, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be11f0a1f0e42c37 = b_be11f0a1f0e42c37.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_be11f0a1f0e42c37[] = {
  &s_cc95526ec6829913,
  &s_f7d3ae60e31dac13,
};
static const uint16_t m_be11f0a1f0e42c37[] = {1, 0};
static const uint16_t i_be11f0a1f0e42c37[] = {0, 1};
const ::capnp::_::RawSchema s_be11f0a1f0e42c37 = {
  0xbe11f0a1f0e42c37, b_be11f0a1f0e42c37.words, 54, d_be11f0a1f0e42c37, m_be11f0a1f0e42c37,
  2, 2, i_be11f0a1f0e42c37, nullptr, nullptr, { &s_be11f0a1f0e42c37, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// AccelWithCovarianceStamped
constexpr uint16_t AccelWithCovarianceStamped::_capnpPrivate::dataWordSize;
constexpr uint16_t AccelWithCovarianceStamped::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AccelWithCovarianceStamped::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AccelWithCovarianceStamped::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

