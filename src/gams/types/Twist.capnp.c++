// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Twist.capnp

#include "Twist.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_e8ea81df956ce26b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    107, 226, 108, 149, 223, 129, 234, 232,
     27,   0,   0,   0,   1,   0,   0,   0,
    179,  19,   5, 170, 138, 239,  53, 225,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 103,  97, 109, 115,
     47, 116, 121, 112, 101, 115,  47,  84,
    119, 105, 115, 116,  46,  99,  97, 112,
    110, 112,  58,  84, 119, 105, 115, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 110, 101,  97, 114,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    212,  13, 137, 145, 254, 222,  42, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110, 103, 117, 108,  97, 114,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    212,  13, 137, 145, 254, 222,  42, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8ea81df956ce26b = b_e8ea81df956ce26b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8ea81df956ce26b[] = {
  &s_b92adefe91890dd4,
};
static const uint16_t m_e8ea81df956ce26b[] = {1, 0};
static const uint16_t i_e8ea81df956ce26b[] = {0, 1};
const ::capnp::_::RawSchema s_e8ea81df956ce26b = {
  0xe8ea81df956ce26b, b_e8ea81df956ce26b.words, 49, d_e8ea81df956ce26b, m_e8ea81df956ce26b,
  1, 2, i_e8ea81df956ce26b, nullptr, nullptr, { &s_e8ea81df956ce26b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// Twist
constexpr uint16_t Twist::_capnpPrivate::dataWordSize;
constexpr uint16_t Twist::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Twist::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Twist::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

