// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Twist.capnp

#ifndef CAPNP_INCLUDED_e135ef8aaa0513b3_
#define CAPNP_INCLUDED_e135ef8aaa0513b3_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "Vector3.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e8ea81df956ce26b);

}  // namespace schemas
}  // namespace capnp

namespace gams {
namespace types {

struct Twist {
  Twist() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8ea81df956ce26b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Twist::Reader {
public:
  typedef Twist Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLinear() const;
  inline  ::gams::types::Vector3::Reader getLinear() const;

  inline bool hasAngular() const;
  inline  ::gams::types::Vector3::Reader getAngular() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Twist::Builder {
public:
  typedef Twist Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLinear();
  inline  ::gams::types::Vector3::Builder getLinear();
  inline void setLinear( ::gams::types::Vector3::Reader value);
  inline  ::gams::types::Vector3::Builder initLinear();
  inline void adoptLinear(::capnp::Orphan< ::gams::types::Vector3>&& value);
  inline ::capnp::Orphan< ::gams::types::Vector3> disownLinear();

  inline bool hasAngular();
  inline  ::gams::types::Vector3::Builder getAngular();
  inline void setAngular( ::gams::types::Vector3::Reader value);
  inline  ::gams::types::Vector3::Builder initAngular();
  inline void adoptAngular(::capnp::Orphan< ::gams::types::Vector3>&& value);
  inline ::capnp::Orphan< ::gams::types::Vector3> disownAngular();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Twist::Pipeline {
public:
  typedef Twist Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gams::types::Vector3::Pipeline getLinear();
  inline  ::gams::types::Vector3::Pipeline getAngular();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Twist::Reader::hasLinear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Twist::Builder::hasLinear() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Vector3::Reader Twist::Reader::getLinear() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gams::types::Vector3::Builder Twist::Builder::getLinear() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Vector3::Pipeline Twist::Pipeline::getLinear() {
  return  ::gams::types::Vector3::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Twist::Builder::setLinear( ::gams::types::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Vector3::Builder Twist::Builder::initLinear() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Twist::Builder::adoptLinear(
    ::capnp::Orphan< ::gams::types::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Vector3> Twist::Builder::disownLinear() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Twist::Reader::hasAngular() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Twist::Builder::hasAngular() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gams::types::Vector3::Reader Twist::Reader::getAngular() const {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gams::types::Vector3::Builder Twist::Builder::getAngular() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gams::types::Vector3::Pipeline Twist::Pipeline::getAngular() {
  return  ::gams::types::Vector3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Twist::Builder::setAngular( ::gams::types::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gams::types::Vector3::Builder Twist::Builder::initAngular() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Twist::Builder::adoptAngular(
    ::capnp::Orphan< ::gams::types::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::gams::types::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gams::types::Vector3> Twist::Builder::disownAngular() {
  return ::capnp::_::PointerHelpers< ::gams::types::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_e135ef8aaa0513b3_
