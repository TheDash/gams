// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Wrench.capnp

#include "Wrench.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_a891bd1a772ec492 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146, 196,  46, 119,  26, 189, 145, 168,
     28,   0,   0,   0,   1,   0,   0,   0,
     99, 177,  74, 110,  15, 142, 249, 130,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 103,  97, 109, 115,
     47, 116, 121, 112, 101, 115,  47,  87,
    114, 101, 110,  99, 104,  46,  99,  97,
    112, 110, 112,  58,  87, 114, 101, 110,
     99, 104,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 114, 113, 117, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    212,  13, 137, 145, 254, 222,  42, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 114,  99, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    212,  13, 137, 145, 254, 222,  42, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a891bd1a772ec492 = b_a891bd1a772ec492.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a891bd1a772ec492[] = {
  &s_b92adefe91890dd4,
};
static const uint16_t m_a891bd1a772ec492[] = {1, 0};
static const uint16_t i_a891bd1a772ec492[] = {0, 1};
const ::capnp::_::RawSchema s_a891bd1a772ec492 = {
  0xa891bd1a772ec492, b_a891bd1a772ec492.words, 49, d_a891bd1a772ec492, m_a891bd1a772ec492,
  1, 2, i_a891bd1a772ec492, nullptr, nullptr, { &s_a891bd1a772ec492, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace gams {
namespace types {

// Wrench
constexpr uint16_t Wrench::_capnpPrivate::dataWordSize;
constexpr uint16_t Wrench::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Wrench::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Wrench::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

